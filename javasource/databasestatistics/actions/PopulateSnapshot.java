// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package databasestatistics.actions;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Function;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import databasestatistics.helpers.DbHelper;
import databasestatistics.proxies.Snapshot;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class PopulateSnapshot extends CustomJavaAction<java.lang.Void>
{
	private IMendixObject __snapshot;
	private databasestatistics.proxies.Snapshot snapshot;

	public PopulateSnapshot(IContext context, IMendixObject snapshot)
	{
		super(context);
		this.__snapshot = snapshot;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.snapshot = __snapshot == null ? null : databasestatistics.proxies.Snapshot.initialize(getContext(), __snapshot);

		// BEGIN USER CODE
		Core.dataStorage().executeWithConnection(getContext(), populateSnapshot(getContext(), snapshot));
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "PopulateSnapshot";
	}

	// BEGIN EXTRA CODE
	private Function<Connection, Void> populateSnapshot(IContext context, Snapshot snapshot) throws Exception {
		return connection ->
		{
			Statement stat = null;
			ResultSet rs = null;
			List<IMendixObject> statements = new LinkedList<>();
			try {
				stat = connection.createStatement();
				rs = stat.executeQuery("SELECT * FROM pg_stat_statements");
				
				ResultSetMetaData meta = rs.getMetaData();
				List<String> columns = new LinkedList<>();
				for (int i = 1; i <= meta.getColumnCount(); i++) 
					columns.add(meta.getColumnName(i));
								
				while (rs.next()) {
					databasestatistics.proxies.Statement mxStat = new databasestatistics.proxies.Statement(context);
					mxStat.setQueryId(rs.getLong("queryid"));
					mxStat.setQuery(rs.getString("query"));
					mxStat.setCalls(rs.getLong("calls"));
					mxStat.setRows(rs.getLong("rows"));
					
					if (columns.contains("total_exec_time")) {
						mxStat.setTotalTimeSpentExecutingMs(rs.getBigDecimal("total_exec_time"));
					} else if (columns.contains("total_time")) {
						mxStat.setTotalTimeSpentExecutingMs(rs.getBigDecimal("total_time"));
					}
					
					if (columns.contains("min_exec_time")) {
						mxStat.setMinimumTimeSpentExecutingMs(rs.getBigDecimal("min_exec_time"));
					} else if (columns.contains("min_time")) {
						mxStat.setMinimumTimeSpentExecutingMs(rs.getBigDecimal("min_time"));
					}
					
					if (columns.contains("max_exec_time")) {
						mxStat.setMaximumTimeSpentExecutingMs(rs.getBigDecimal("max_exec_time"));
					} else if (columns.contains("max_time")) {
						mxStat.setMaximumTimeSpentExecutingMs(rs.getBigDecimal("max_time"));
					}
					
					if (columns.contains("mean_exec_time")) {
						mxStat.setMeanTimeSpentExecutingMs(rs.getBigDecimal("mean_exec_time"));
					} else if (columns.contains("mean_time")) {
						mxStat.setMeanTimeSpentExecutingMs(rs.getBigDecimal("mean_time"));
					}
					
					mxStat.setStatement_Snapshot(snapshot);
					
					statements.add(mxStat.getMendixObject());
				}
				
			} catch (SQLException e) {
				DbHelper.LOGGER.error("Unable to retrieve pg_stat_statements data: " + e.getMessage(), e);
			} finally {
				try { if (stat != null) stat.close(); } catch (Exception e) {}
				try { if (rs != null) rs.close(); } catch (Exception e) {}
			}
			
			Core.commit(context, statements);
			return null;
		};
	}
	// END EXTRA CODE
}
